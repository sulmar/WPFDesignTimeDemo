//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource1
{
    using System; 
    using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
    internal class SampleDataSource1 { }
#else

    public class SampleDataSource1 : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public SampleDataSource1()
        {
            try
            {
                Uri resourceUri = new Uri("/WPFDesignTimeDemo;component/SampleData/SampleDataSource1/SampleDataSource1.xaml", UriKind.RelativeOrAbsolute);
                System.Windows.Application.LoadComponent(this, resourceUri);
            }
            catch
            {
            }
        }

        private MyCollection _MyCollection = new MyCollection();

        public MyCollection MyCollection
        {
            get
            {
                return this._MyCollection;
            }
        }
    }

    public class MyCollectionItem : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private string _Name = string.Empty;

        public string Name
        {
            get
            {
                return this._Name;
            }

            set
            {
                if (this._Name != value)
                {
                    this._Name = value;
                    this.OnPropertyChanged("Name");
                }
            }
        }

        private bool _IsDeleted = false;

        public bool IsDeleted
        {
            get
            {
                return this._IsDeleted;
            }

            set
            {
                if (this._IsDeleted != value)
                {
                    this._IsDeleted = value;
                    this.OnPropertyChanged("IsDeleted");
                }
            }
        }
    }

    public class MyCollection : System.Collections.ObjectModel.ObservableCollection<MyCollectionItem>
    { 
    }
#endif
}
